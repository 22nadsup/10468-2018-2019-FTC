package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.Servo;                   //Servo only
import com.qualcomm.robotcore.hardware.DcMotorController;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.Range;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import java.util.List;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;

@Autonomous(name="AutonmousCRATER_4x4_TF", group="Linear Opmode")

public class AutonomousCRATER_4x4_TF extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime mRuntime = new ElapsedTime();   //Most teams now use runtime, replace everytime
    private DcMotor leftFront = null;                   //Use your own motor names
    private DcMotor rightFront = null;
    private DcMotor leftRear = null;
    private DcMotor rightRear = null;
    private DcMotor liftmotor = null;
    private Servo dropServo = null;
    private static final String TFOD_MODEL_ASSET = "RoverRuckus.tflite";      //Game that year
    private static final String LABEL_GOLD_MINERAL = "Gold Mineral";          //Game pieces that year
    private static final String LABEL_SILVER_MINERAL = "Silver Mineral";
    
//requires key from  https://developer.vuforia.com/license-manager.
    private static final String VUFORIA_KEY = "AZaiIR3/////AAABmS0PZCvCcE6+mDitWMjz42R3i2ulS0Ebfzn1U52nKrcjLo+uOs/1qr4h0azytCvsTT5gE+QRYgvjsBylUohXSl8ZExAXCaYnifbpWQt+iRM/VlkxdAOpkwgb1ucSKSJa/tWac9WlaJPcotTERN1mELbpoM9zpa0Uw0NN2S/q5HNTsPWtQ5aSbLR6yLGNScpL1sO0Guy6RFwR6DjHQ1984LRINtx00mW8RGz+K2/z9wJ7n5a2ngaZLVEQ4hrHidIpcOl8jDU7RmAsHhQZ7LJ3HQoGEIKMZQMeMxzdrfvr0YSbdWGpxcIqHcAtVOwAQnEV/CAsIClJoLlAHOTmuwxGeHUtQ97O/M1GDBmT+HP00lc3";
    private VuforiaLocalizer vuforia;
    private TFObjectDetector tfod;

    @Override
    public void runOpMode() {
        initVuforia();

        if (ClassFactory.getInstance().canCreateTFObjectDetector()) {
            initTfod();
        } else {
            telemetry.addData("Sorry!", "This device is not compatible with TFOD");
        }
        telemetry.addData("Status", "Initialized");
        telemetry.update();
    
        // Initialize the hardware variables.
        leftFront = hardwareMap.get(DcMotor.class, "M1");           //Connect names above with names in the phones
        rightFront = hardwareMap.get(DcMotor.class, "M0");
        leftRear = hardwareMap.get(DcMotor.class, "M2");
        rightRear = hardwareMap.get(DcMotor.class, "M3");
        liftmotor = hardwareMap.get(DcMotor.class, "lift");
        dropServo = hardwareMap.get(Servo.class, "S1");


        //Allow Motors to Freespin without power
        leftRear.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.FLOAT); //Float isn't needed, used for motor to rotate freely when not in use
        rightRear.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.FLOAT);

        // Most robots need the motor on one side to be reversed to drive forward
        //Define motor direction
        leftFront.setDirection(DcMotor.Direction.FORWARD);              //Set motor direction
        rightFront.setDirection(DcMotor.Direction.REVERSE);
        leftRear.setDirection(DcMotor.Direction.FORWARD);
        rightRear.setDirection(DcMotor.Direction.REVERSE);
        liftmotor.setDirection(DcMotor.Direction.REVERSE);
        
        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        
        //if it sees gold (year's game piece) it will go to RightTurn
        if (opModeIsActive()) {
        if (tfod != null) {
                tfod.activate();
            }
        while (opModeIsActive()) {
                if (tfod != null) {
                }
                
     public void RightTurn() //defines what RightTurn does, makes it easier if you want multiple options or to repeat it a lot
        {
           mRuntime.reset();
        
        liftmotor.setPower(-.6);
        leftFront.setPower(0);
        rightFront.setPower(0);
        leftRear.setPower(0);
        rightRear.setPower(0);
        dropServo.setPosition(0);
        while (mRuntime.time() < 5.6) {}
        
        mRuntime.reset();

         liftmotor.setPower(0);
        leftFront.setPower(0);
        rightFront.setPower(0);
        leftRear.setPower(0);
        rightRear.setPower(0);
        dropServo.setPosition(0);
         while (mRuntime.time() < .5) {}
           
           
           
          //Turn away from lander
        mRuntime.reset();
        
        
        liftmotor.setPower(0);
        leftFront.setPower(-.4);
        rightFront.setPower(.3);
        leftRear.setPower(-.4);
        rightRear.setPower(0);
       while (mRuntime.time() < 1.8) {}
        
       mRuntime.reset();
      
        liftmotor.setPower(.6);
        leftFront.setPower(0);
        rightFront.setPower(0);
        leftRear.setPower(0);
        rightRear.setPower(0);
        dropServo.setPosition(0);
        while (mRuntime.time() < 5.6) {}
        
        liftmotor.setPower(0);
        leftFront.setPower(0);
        rightFront.setPower(0);
        dropServo.setPosition(0);
        
        //Head toward crater
        mRuntime.reset();
        
        liftmotor.setPower(0);
        leftFront.setPower(.5);
        rightFront.setPower(.5);
        dropServo.setPosition(0);
        while (mRuntime.time() < .75) {}

        
        liftmotor.setPower(0);
        leftFront.setPower(0);
        rightFront.setPower(0);
        dropServo.setPosition(0);
        }
 
      
            //Show the elapsed game time and wheel power.
            //telemetry.addData("Status", "Run Time: " + runtime.toString());
            //telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);
            //telemetry.update();
        
    }
